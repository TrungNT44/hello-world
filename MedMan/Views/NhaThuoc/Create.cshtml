@model sThuoc.Models.ViewModels.NhaThuocViewModel
@{
    var m = Model;
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    if (ViewContext.RouteData.Values["action"].ToString().ToLower() == "edit")
    {
        <h4><b>Cập nhật thông tin nhà thuốc</b></h4>
    }
    else
    {
        <h4><b>Thêm mới nhà thuốc</b></h4>
    }
    <hr />
    <div class="row">
        <div class="col-md-6">
            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.MaNhaThuoc, htmlAttributes: new { @class = "control-label col-md-3" })

                    @if (ViewContext.RouteData.Values["action"].ToString().ToLower() == "edit")
                    {
                        <div class="col-md-5">
                            @Html.EditorFor(model => model.MaNhaThuoc, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.MaNhaThuoc, "", new { @class = "text-danger" })
                        </div>
                    }
                    else
                    {
                        <div class="col-md-5">
                            @Html.EditorFor(model => model.MaNhaThuoc, new { htmlAttributes = new { @class = "form-control", } })
                            @Html.ValidationMessageFor(model => model.MaNhaThuoc, "", new { @class = "text-danger" })
                        </div>
                    }


                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TenNhaThuoc, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.TenNhaThuoc, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TenNhaThuoc, "", new { @class = "text-danger" })
                    </div>
                </div>
                @*<div class="form-group">
                    @Html.LabelFor(model => model.TinhThanhId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.TinhThanhId, new SelectList(ViewBag.LstTinhThanh, "IdTinhThanh", "TenTinhThanh"), "--Chọn tỉnh thành--", new { @class = "form-control" })
                    </div>
                </div>*@
                <div class="form-group">
                    @Html.LabelFor(model => model.DiaChi, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.DiaChi, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DiaChi, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SoKinhDoanh, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.TextBoxFor(model => model.SoKinhDoanh, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SoKinhDoanh, "Sổ kinh doanh phải là số", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DienThoai, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.DienThoai, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DienThoai, "", new { @class = "text-danger" })
                    </div>
                </div>



            </div>
        </div>
        <div class="col-md-6">
            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.Administrator, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="input-group">
                        @Html.HiddenFor(model => model.Administrator)
                        <input type="text" class="form-control" readonly="readonly" name="AdministratorText" placeholder="Người quản lý..." value="@Model.AdminName" />
                        <span class="input-group-btn">
                            <button class="btn btn-default" data-toggle="modal" data-updatevalue="input[name=Administrator]" data-updatetext="input[name=AdministratorText]" data-target="#UserPickerModal" type="button">
                                <i class="glyphicon glyphicon-eject"></i> Chọn
                            </button>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.Administrator, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.MaNhaThuocCha, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="input-group">
                        @Html.HiddenFor(model => model.MaNhaThuocCha)
                        @if (Model.MaNhaThuoc != Model.MaNhaThuocCha)
                        {
                            <input type="text" class="form-control" readonly="readonly" name="TenNhaThuocQuanLy" placeholder="Nhà thuốc quản lý..." value="@Model.MaNhaThuocCha - @Model.TenNhaThuocQuanLy"/>
                        }
                        else
                        {
                            <input type="text" class="form-control" readonly="readonly" name="TenNhaThuocQuanLy" placeholder="Nhà thuốc quản lý..." value="" />
                        }<span class="input-group-btn">
                            <button class="btn btn-default" data-toggle="modal" data-updatevalue="input[name=MaNhaThuocCha]" data-updatetext="input[name=TenNhaThuocQuanLy]" data-target="#NhaThuocPickerModal" type="button">
                                <i class="glyphicon glyphicon-eject"></i> Chọn
                            </button>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.MaNhaThuocCha, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.NguoiDaiDien, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.NguoiDaiDien, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NguoiDaiDien, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "Email chưa đúng", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DuocSy, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.DuocSy, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DuocSy, "", new { @class = "text-danger" })
                    </div>
                </div>




            </div>
        </div>
    </div>
    <div class="row">

        <div class="form-group">
            <div class="col-md-offset-2 col-md-12">
                @Html.ActionLink("Quay lại", "Index", null, new { @class = "btn btn-default" })
                <span class="btn-separator">|</span>
                @if (ViewContext.RouteData.Values["action"].ToString().ToLower() == "edit")
                {
                    <input type="submit" value="Cập nhật" class="btn btn-default" />
                }
                else
                {
                    <input type="submit" value="Thêm mới" class="btn btn-primary" />
                }
            </div>

        </div>
    </div>

}
@{
    Html.RenderAction("UserPicker", "Account");
    Html.RenderAction("NhaThuocPicker", "NhaThuoc");
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/nhathuocpicker")
    @Scripts.Render("~/bundles/userpicker")
}
